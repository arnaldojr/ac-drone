{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bem vindo ao site da Atividade Complementar de Drones \u00b6 Prof. Arnaldo Viana Reposit\u00f3rio com todos os arquivos est\u00e1 disponivel em: https://github.com/arnaldojr/ac-drone/ Objetivos \u00b6 Ao final da disciplina o aluno ser\u00e1 capaz de: Compreender o funcionamento b\u00e1sico de um Drone Programar e desenvolver pequenos c\u00f3digos para um Drone Inteligente O que preciso saber para acompanhar a atividade? \u00b6 Vamos trabalhar com a linguagem de programa\u00e7\u00e3o Python para desenvolver c\u00f3digos simples para controlar o drone. Usaremos um framework para sistemas rob\u00f3ticos chamado (ROS) Robot Operating System. Os conceitos b\u00e1sicos ser\u00e3o abordados em aula, n\u00e3o se preocupe. Gostei do tema, como posso aprender mais? \u00b6 O INSPER possui diversas disciplinas que abordam de forma profunda o que vimos nesta atividade complementar: Rob\u00f3tica Computacional Vis\u00e3o Computacional Drones","title":"Home"},{"location":"#bem-vindo-ao-site-da-atividade-complementar-de-drones","text":"Prof. Arnaldo Viana Reposit\u00f3rio com todos os arquivos est\u00e1 disponivel em: https://github.com/arnaldojr/ac-drone/","title":"Bem vindo ao site da Atividade Complementar de Drones"},{"location":"#objetivos","text":"Ao final da disciplina o aluno ser\u00e1 capaz de: Compreender o funcionamento b\u00e1sico de um Drone Programar e desenvolver pequenos c\u00f3digos para um Drone Inteligente","title":"Objetivos"},{"location":"#o-que-preciso-saber-para-acompanhar-a-atividade","text":"Vamos trabalhar com a linguagem de programa\u00e7\u00e3o Python para desenvolver c\u00f3digos simples para controlar o drone. Usaremos um framework para sistemas rob\u00f3ticos chamado (ROS) Robot Operating System. Os conceitos b\u00e1sicos ser\u00e3o abordados em aula, n\u00e3o se preocupe.","title":"O que preciso saber para acompanhar a atividade?"},{"location":"#gostei-do-tema-como-posso-aprender-mais","text":"O INSPER possui diversas disciplinas que abordam de forma profunda o que vimos nesta atividade complementar: Rob\u00f3tica Computacional Vis\u00e3o Computacional Drones","title":"Gostei do tema, como posso aprender mais?"},{"location":"aulas/Desafio1/","text":"Desafio1 \u00b6 Em grupo, rode o c\u00f3digo teste_odom.py . Esse script faz o drone percorrer uma dist\u00e2ncia de 5 metros em linha reta. Use esse c\u00f3digo como base para desenvolver um c\u00f3digo que faz o drone percorrer um quadrado de lado igual 5 metros.","title":"Desafio1"},{"location":"aulas/Desafio1/#desafio1","text":"Em grupo, rode o c\u00f3digo teste_odom.py . Esse script faz o drone percorrer uma dist\u00e2ncia de 5 metros em linha reta. Use esse c\u00f3digo como base para desenvolver um c\u00f3digo que faz o drone percorrer um quadrado de lado igual 5 metros.","title":"Desafio1"},{"location":"aulas/Desafio2/","text":"Desafio2 \u00b6 Em grupo, rode o c\u00f3digo vis\u00e3o_bebop.py . Esse script usa a camera do drone para detectar objetos de uma cor especifica. Use esse c\u00f3digo como base para desenvolver um c\u00f3digo que faz o drone perseguir um objeto da sua prefer\u00eancia.","title":"Desafio2"},{"location":"aulas/Desafio2/#desafio2","text":"Em grupo, rode o c\u00f3digo vis\u00e3o_bebop.py . Esse script usa a camera do drone para detectar objetos de uma cor especifica. Use esse c\u00f3digo como base para desenvolver um c\u00f3digo que faz o drone perseguir um objeto da sua prefer\u00eancia.","title":"Desafio2"},{"location":"aulas/introducao/drone/","text":"O que s\u00e3o drones? \u00b6 Popularmente chamado de DRONES , \u00e9 tambem conhecido como Ve\u00edculos A\u00e9reos N\u00e3o Tripulados VANTs ou Aeronave Remotamente Pilotada RPAs ou UAVs . Na literatura encontramos algumas diferen\u00e7as entre cada um deles, mas para o caso vale saber que os VANTs foram criados para atuar inicialmente na \u00e1rea militar, existe registro do uso desde a decada de 80 pela for\u00e7a a\u00e9rea israelense. Nos dias atuais j\u00e1 s\u00e3o utilizados em diversas aplica\u00e7\u00f5es nas mais diversas \u00e1reas tais como comercial, industrial, entreterimento, e muito mais... Regulamenta\u00e7\u00e3o de drones no Brasil \u00b6 No Brasil, a regulamenta\u00e7\u00e3o dos \u00e9 feita em conjunto por meio de tr\u00eas \u00f3rg\u00e3os: ANAC, ANATEL e DECEA . Cada \u00f3rg\u00e3o \u00e9 respons\u00e1vel por uma \u00e1rea que envolve a opera\u00e7\u00e3o dos drones. Classes de aeronaves remotamente pilotadas \u00b6 Classe 1: RPAs com peso m\u00e1ximo de decolagem maior que 150 kg; Classe 2: RPAs com peso m\u00e1ximo de decolagem maior que 25 kg e menor ou igual a 150 kg; Classe 3: RPAs com peso m\u00e1ximo de decolagem maior que 250 g e menor do que 25 kg; Para saber mais acesse o site da ANAC - Ag\u00eancia Nacional de Avia\u00e7\u00e3o Civil Regras de opera\u00e7\u00e3o sobre Classe3 \u00b6 A ANAC define: Ser maior de 18 anos; Equipamentos com peso m\u00e1ximo de decolagem acima de 250g precisam ser cadastrados no SISANT; \u00c9 obrigat\u00f3ria a contrata\u00e7\u00e3o de seguro de responsabilidade civil, chamado de Seguro RETA; Altura m\u00e1xima de voo \u00e9 de 400 p\u00e9s ou 120 m de altura. Acima desta altitude \u00e9 necess\u00e1rio ter uma certifica\u00e7\u00e3o de pilotagem espec\u00edfica; Dist\u00e2ncia m\u00ednima horizontal de 30 metros em rela\u00e7\u00e3o a pessoas, casas, pr\u00e9dios, ve\u00edculos e animais. Estar afastado pelo menos 5 km de dist\u00e2ncia de aer\u00f3dromos (Aeroporto); E o DECEA - Departamento de Controle do Espa\u00e7o A\u00e9reo: Para realizar uma opera\u00e7\u00e3o de voo \u00e9 necess\u00e1rio solicitar uma autoriza\u00e7\u00e3o de voo junto ao DECEA, atrav\u00e9s do sistema Sarpas. De modo geral devem ser observadas as seguintes diretrizes do DECEA (ICA 100-40) 30 metros de dist\u00e2ncia de pessoas n\u00e3o anuentes Altura m\u00e1xima de at\u00e9 400ft (aproximadamente 120 metros) distante acima de 05 NM (aproximadamente 9 Km) de aer\u00f3dromos ou helipontos cadastrados Altura m\u00e1xima de at\u00e9 100ft (aproximadamente 30 metros) se distante entre 03 NM (aproximadamente 5,4 Km) e 05 NM (aproximadamente 9 Km) de aer\u00f3dromos ou helipontos cadastrados; Mais informa\u00e7\u00f5es no site: https://www.decea.mil.br/drone/ E a ANATEL : Homologa\u00e7\u00e3o do m\u00f3dulo de radiofrequ\u00eancia e controle remoto. Algumas empresas no Brasil \u00b6 https://www.speedbird.aero/#aircraft https://skydrones.com.br/ https://www.dronepulverizadoragricola.com.br/ https://aldrones.com.br/ Progress Continuar... Dos tipos de VANTs \u00b6 Os drones s\u00e3o classificados entre os multirotores e os de asa fixa. multirotores \u00b6 Drones multirotor s\u00e3o constru\u00eddos com um corpo central e m\u00faltiplos rotores que rotacionam h\u00e9lices para manobrar a aeronave. Os mais comuns s\u00e3o os que possuem quatro (quadric\u00f3pteros), seis (hexac\u00f3pteros) ou oito (octac\u00f3pteros) rotores, mas podemos encontrar drones outras combina\u00e7\u00f5es relativas a quantidade de rotores. Uma vez no ar, um drone multirotor varia a velocidade relativa de cada rotor para alterar o torque, permitindo uma gama de movimentos. Asa fixa \u00b6 O drone de asa fixa \u00e9 um projeto mais tradicional de aeronave, semelhante a um avi\u00e3o. Eles s\u00e3o feitos de um corpo central que tem duas asas e, geralmente, uma \u00fanica h\u00e9lice. Uma vez no ar, as duas asas geram sustenta\u00e7\u00e3o que compensa seu peso permitindo que a aeronave permane\u00e7a em v\u00f4o. Por causa disso, eles s\u00f3 precisam usar energia para seguir em frente, n\u00e3o para se manter no ar. Progress Continuar... Como um drone voa? \u00b6 De forma simetrica, as helices empuram o ar para baixo, logo o torque resultante dos 4 motore faz com que o drone decole, pouse, avance, recue e etc... O controle na velocidade das helices resulta na beleza dos movimentos que o drone \u00e9 capaz de realizar. Sistema de coordenadas \u00b6 A orienta\u00e7\u00e3o \u00e9 especificada em Nota\u00e7\u00e3o de \u00e2ngulos de Euler XYZ (roll,pitch,yaw), (\u03c6,\u03b8,\u03a8). Os seis graus de liberdade do drone, que consistem nos movimentos de transla\u00e7\u00e3o nos eixos: x, y e z; e os movimentos de rota\u00e7\u00e3o, roll (arfagem), pitch (rolagem) e yaw (guinada). Avalia\u00e7\u00e3o da varia\u00e7\u00e3o angular em roll.","title":"Drones"},{"location":"aulas/introducao/drone/#o-que-sao-drones","text":"Popularmente chamado de DRONES , \u00e9 tambem conhecido como Ve\u00edculos A\u00e9reos N\u00e3o Tripulados VANTs ou Aeronave Remotamente Pilotada RPAs ou UAVs . Na literatura encontramos algumas diferen\u00e7as entre cada um deles, mas para o caso vale saber que os VANTs foram criados para atuar inicialmente na \u00e1rea militar, existe registro do uso desde a decada de 80 pela for\u00e7a a\u00e9rea israelense. Nos dias atuais j\u00e1 s\u00e3o utilizados em diversas aplica\u00e7\u00f5es nas mais diversas \u00e1reas tais como comercial, industrial, entreterimento, e muito mais...","title":"O que s\u00e3o drones?"},{"location":"aulas/introducao/drone/#regulamentacao-de-drones-no-brasil","text":"No Brasil, a regulamenta\u00e7\u00e3o dos \u00e9 feita em conjunto por meio de tr\u00eas \u00f3rg\u00e3os: ANAC, ANATEL e DECEA . Cada \u00f3rg\u00e3o \u00e9 respons\u00e1vel por uma \u00e1rea que envolve a opera\u00e7\u00e3o dos drones.","title":"Regulamenta\u00e7\u00e3o de drones no Brasil"},{"location":"aulas/introducao/drone/#classes-de-aeronaves-remotamente-pilotadas","text":"Classe 1: RPAs com peso m\u00e1ximo de decolagem maior que 150 kg; Classe 2: RPAs com peso m\u00e1ximo de decolagem maior que 25 kg e menor ou igual a 150 kg; Classe 3: RPAs com peso m\u00e1ximo de decolagem maior que 250 g e menor do que 25 kg; Para saber mais acesse o site da ANAC - Ag\u00eancia Nacional de Avia\u00e7\u00e3o Civil","title":"Classes de aeronaves remotamente pilotadas"},{"location":"aulas/introducao/drone/#regras-de-operacao-sobre-classe3","text":"A ANAC define: Ser maior de 18 anos; Equipamentos com peso m\u00e1ximo de decolagem acima de 250g precisam ser cadastrados no SISANT; \u00c9 obrigat\u00f3ria a contrata\u00e7\u00e3o de seguro de responsabilidade civil, chamado de Seguro RETA; Altura m\u00e1xima de voo \u00e9 de 400 p\u00e9s ou 120 m de altura. Acima desta altitude \u00e9 necess\u00e1rio ter uma certifica\u00e7\u00e3o de pilotagem espec\u00edfica; Dist\u00e2ncia m\u00ednima horizontal de 30 metros em rela\u00e7\u00e3o a pessoas, casas, pr\u00e9dios, ve\u00edculos e animais. Estar afastado pelo menos 5 km de dist\u00e2ncia de aer\u00f3dromos (Aeroporto); E o DECEA - Departamento de Controle do Espa\u00e7o A\u00e9reo: Para realizar uma opera\u00e7\u00e3o de voo \u00e9 necess\u00e1rio solicitar uma autoriza\u00e7\u00e3o de voo junto ao DECEA, atrav\u00e9s do sistema Sarpas. De modo geral devem ser observadas as seguintes diretrizes do DECEA (ICA 100-40) 30 metros de dist\u00e2ncia de pessoas n\u00e3o anuentes Altura m\u00e1xima de at\u00e9 400ft (aproximadamente 120 metros) distante acima de 05 NM (aproximadamente 9 Km) de aer\u00f3dromos ou helipontos cadastrados Altura m\u00e1xima de at\u00e9 100ft (aproximadamente 30 metros) se distante entre 03 NM (aproximadamente 5,4 Km) e 05 NM (aproximadamente 9 Km) de aer\u00f3dromos ou helipontos cadastrados; Mais informa\u00e7\u00f5es no site: https://www.decea.mil.br/drone/ E a ANATEL : Homologa\u00e7\u00e3o do m\u00f3dulo de radiofrequ\u00eancia e controle remoto.","title":"Regras de opera\u00e7\u00e3o sobre Classe3"},{"location":"aulas/introducao/drone/#algumas-empresas-no-brasil","text":"https://www.speedbird.aero/#aircraft https://skydrones.com.br/ https://www.dronepulverizadoragricola.com.br/ https://aldrones.com.br/ Progress Continuar...","title":"Algumas empresas no Brasil"},{"location":"aulas/introducao/drone/#dos-tipos-de-vants","text":"Os drones s\u00e3o classificados entre os multirotores e os de asa fixa.","title":"Dos tipos de VANTs"},{"location":"aulas/introducao/drone/#multirotores","text":"Drones multirotor s\u00e3o constru\u00eddos com um corpo central e m\u00faltiplos rotores que rotacionam h\u00e9lices para manobrar a aeronave. Os mais comuns s\u00e3o os que possuem quatro (quadric\u00f3pteros), seis (hexac\u00f3pteros) ou oito (octac\u00f3pteros) rotores, mas podemos encontrar drones outras combina\u00e7\u00f5es relativas a quantidade de rotores. Uma vez no ar, um drone multirotor varia a velocidade relativa de cada rotor para alterar o torque, permitindo uma gama de movimentos.","title":"multirotores"},{"location":"aulas/introducao/drone/#asa-fixa","text":"O drone de asa fixa \u00e9 um projeto mais tradicional de aeronave, semelhante a um avi\u00e3o. Eles s\u00e3o feitos de um corpo central que tem duas asas e, geralmente, uma \u00fanica h\u00e9lice. Uma vez no ar, as duas asas geram sustenta\u00e7\u00e3o que compensa seu peso permitindo que a aeronave permane\u00e7a em v\u00f4o. Por causa disso, eles s\u00f3 precisam usar energia para seguir em frente, n\u00e3o para se manter no ar. Progress Continuar...","title":"Asa fixa"},{"location":"aulas/introducao/drone/#como-um-drone-voa","text":"De forma simetrica, as helices empuram o ar para baixo, logo o torque resultante dos 4 motore faz com que o drone decole, pouse, avance, recue e etc... O controle na velocidade das helices resulta na beleza dos movimentos que o drone \u00e9 capaz de realizar.","title":"Como um drone voa?"},{"location":"aulas/introducao/drone/#sistema-de-coordenadas","text":"A orienta\u00e7\u00e3o \u00e9 especificada em Nota\u00e7\u00e3o de \u00e2ngulos de Euler XYZ (roll,pitch,yaw), (\u03c6,\u03b8,\u03a8). Os seis graus de liberdade do drone, que consistem nos movimentos de transla\u00e7\u00e3o nos eixos: x, y e z; e os movimentos de rota\u00e7\u00e3o, roll (arfagem), pitch (rolagem) e yaw (guinada). Avalia\u00e7\u00e3o da varia\u00e7\u00e3o angular em roll.","title":"Sistema de coordenadas"},{"location":"aulas/introducao/ros/","text":"ROS \u00b6 O ROS ou Robotic Operation System \u00e9 basicamente um framework OpenSource para o desenvolvimento de aplica\u00e7\u00f5es em robotica. Atualmente \u00e9 um dos maiores e mais utilizados em projetos de rob\u00f3tica. N\u00e3o precisamos de um conhecimento profundo sobre o ROS para participar da nossa atividade complementar, apenas alguns conceitos b\u00e1sicos j\u00e1 s\u00e3o o suficientes. Conceitos simples que precisamos compreender. \u00b6 O ROS \u00e9 um framework commplexo, n\u00e3o vamos conseguir abordar tudo que a ferramenta oferece. vamos ver apenas conceitos simples para a nossa aula. E o que preciso entender de ROS \u00b6 Compreender como o framework funciona e quem s\u00e3o os principais personagens. Vamos explorar brevemente e entender o b\u00e1sico sobre ROS. ROS MASTER \u00b6 Tudo come\u00e7a aqui, o ROS Master faz o controle dos nodes (n\u00f3s), registra os nodes e acompanha os n\u00f3s quando novos n\u00f3s s\u00e3o executados e entram no sistema. O ROS Master estabelece uma aloca\u00e7\u00e3o din\u00e2mica de conex\u00f5es. Os n\u00f3s n\u00e3o podem se comunicar at\u00e9 que o Mestre notifique os n\u00f3s da exist\u00eancia um do outro. O protocolo mais usado para conex\u00e3o \u00e9 o protocolo padr\u00e3o de controle de transmiss\u00e3o/protocolo de internet (TCP/IP). Uma vez que esses n\u00f3s s\u00e3o capazes de localizar uns aos outros, eles podem se comunicar entre si P2P (peer-to-peer). ROS NODES \u00b6 A ideia do ROS \u00e9 facilitar a forma de comunica\u00e7\u00e3o entre n\u00f3s (nodes). Os nodes s\u00e3o basicamente processos que realizam alguma tarefa especifica com a vantagem de se registrar com o n\u00f3 ROS Master e se comunicar com outros n\u00f3s no sistema. Por exemplo, um n\u00f3 pode capturar as imagens de uma c\u00e2mera e enviar as imagens para outro n\u00f3 para processamento. Depois de processar a imagem, o segundo n\u00f3 pode enviar um sinal de controle para um terceiro n\u00f3 para controlar um manipulador rob\u00f3tico em resposta \u00e0 vis\u00e3o da c\u00e2mera. ROS TOPICS Alguns n\u00f3s fornecem informa\u00e7\u00f5es para outros n\u00f3s, como o exemplo acima. Diz-se que esse n\u00f3 publica informa\u00e7\u00f5es que podem ser recebidas por outros n\u00f3s. A informa\u00e7\u00e3o no ROS \u00e9 chamada de t\u00f3pico. Um t\u00f3pico define os tipos de mensagens que ser\u00e3o enviadas em rela\u00e7\u00e3o a esse t\u00f3pico. Quais os tipos de topicos: Publisher - Enviam informa\u00e7\u00f5es Subscriber - Recebem informa\u00e7\u00f5es ROS MENSAGES O ROS mensages define o tipo e o formato dos dados. \u00c9 nele que sabemos se as msg s\u00e3o do tipo String, float e afins. l de ROS. Comandos importantes do terminal que vamos usar bastante \u00b6 rostopic list - lista os t\u00f3picos do ros rosrun exemplo codigo.py - executa o script codigo.py que est\u00e1 na pasta exemplo rqt_image_view - abre a c\u00e2mera do drone rostopic pub --once /bebop/takeoff std_msgs/Empty - decola o drone rostopic pub --once /bebop/land std_msgs/Empty - pousa o drone rosrun teleop_twist_keyboard teleop_twist_keyboard.py cmd_vel:=/bebop/cmd_vel - teleoperar o drone com o teclado Os demais comandos vamos aprender enquanto desenvolvemos nossos c\u00f3digos.... Partiu lab1!","title":"ROS"},{"location":"aulas/introducao/ros/#ros","text":"O ROS ou Robotic Operation System \u00e9 basicamente um framework OpenSource para o desenvolvimento de aplica\u00e7\u00f5es em robotica. Atualmente \u00e9 um dos maiores e mais utilizados em projetos de rob\u00f3tica. N\u00e3o precisamos de um conhecimento profundo sobre o ROS para participar da nossa atividade complementar, apenas alguns conceitos b\u00e1sicos j\u00e1 s\u00e3o o suficientes.","title":"ROS"},{"location":"aulas/introducao/ros/#conceitos-simples-que-precisamos-compreender","text":"O ROS \u00e9 um framework commplexo, n\u00e3o vamos conseguir abordar tudo que a ferramenta oferece. vamos ver apenas conceitos simples para a nossa aula.","title":"Conceitos simples que precisamos compreender."},{"location":"aulas/introducao/ros/#e-o-que-preciso-entender-de-ros","text":"Compreender como o framework funciona e quem s\u00e3o os principais personagens. Vamos explorar brevemente e entender o b\u00e1sico sobre ROS.","title":"E o que preciso entender de ROS"},{"location":"aulas/introducao/ros/#ros-master","text":"Tudo come\u00e7a aqui, o ROS Master faz o controle dos nodes (n\u00f3s), registra os nodes e acompanha os n\u00f3s quando novos n\u00f3s s\u00e3o executados e entram no sistema. O ROS Master estabelece uma aloca\u00e7\u00e3o din\u00e2mica de conex\u00f5es. Os n\u00f3s n\u00e3o podem se comunicar at\u00e9 que o Mestre notifique os n\u00f3s da exist\u00eancia um do outro. O protocolo mais usado para conex\u00e3o \u00e9 o protocolo padr\u00e3o de controle de transmiss\u00e3o/protocolo de internet (TCP/IP). Uma vez que esses n\u00f3s s\u00e3o capazes de localizar uns aos outros, eles podem se comunicar entre si P2P (peer-to-peer).","title":"ROS MASTER"},{"location":"aulas/introducao/ros/#ros-nodes","text":"A ideia do ROS \u00e9 facilitar a forma de comunica\u00e7\u00e3o entre n\u00f3s (nodes). Os nodes s\u00e3o basicamente processos que realizam alguma tarefa especifica com a vantagem de se registrar com o n\u00f3 ROS Master e se comunicar com outros n\u00f3s no sistema. Por exemplo, um n\u00f3 pode capturar as imagens de uma c\u00e2mera e enviar as imagens para outro n\u00f3 para processamento. Depois de processar a imagem, o segundo n\u00f3 pode enviar um sinal de controle para um terceiro n\u00f3 para controlar um manipulador rob\u00f3tico em resposta \u00e0 vis\u00e3o da c\u00e2mera. ROS TOPICS Alguns n\u00f3s fornecem informa\u00e7\u00f5es para outros n\u00f3s, como o exemplo acima. Diz-se que esse n\u00f3 publica informa\u00e7\u00f5es que podem ser recebidas por outros n\u00f3s. A informa\u00e7\u00e3o no ROS \u00e9 chamada de t\u00f3pico. Um t\u00f3pico define os tipos de mensagens que ser\u00e3o enviadas em rela\u00e7\u00e3o a esse t\u00f3pico. Quais os tipos de topicos: Publisher - Enviam informa\u00e7\u00f5es Subscriber - Recebem informa\u00e7\u00f5es ROS MENSAGES O ROS mensages define o tipo e o formato dos dados. \u00c9 nele que sabemos se as msg s\u00e3o do tipo String, float e afins. l de ROS.","title":"ROS NODES"},{"location":"aulas/introducao/ros/#comandos-importantes-do-terminal-que-vamos-usar-bastante","text":"rostopic list - lista os t\u00f3picos do ros rosrun exemplo codigo.py - executa o script codigo.py que est\u00e1 na pasta exemplo rqt_image_view - abre a c\u00e2mera do drone rostopic pub --once /bebop/takeoff std_msgs/Empty - decola o drone rostopic pub --once /bebop/land std_msgs/Empty - pousa o drone rosrun teleop_twist_keyboard teleop_twist_keyboard.py cmd_vel:=/bebop/cmd_vel - teleoperar o drone com o teclado Os demais comandos vamos aprender enquanto desenvolvemos nossos c\u00f3digos.... Partiu lab1!","title":"Comandos importantes do terminal que vamos usar bastante"},{"location":"aulas/lab1/","text":"O que esse vamos ver neste lab? \u00b6 Decolando sem sair do ch\u00e3o Configura\u00e7\u00e3o da infraestrutura Boot do SSD no notebook clone do reposit\u00f3rio Configura\u00e7\u00f5es iniciais com o drone Conex\u00e3o entre PC e Drone Ajustando a conex\u00e3o entre o drone e o notebook Analisando t\u00f3picos, nodes e imagem Primeiro projeto Entendo o c\u00f3digo Python/ROS Rodando o c\u00f3digo no Drone Desafio1 chegou a hora de criar asas e voar! Configura\u00e7\u00e3o da Infraestrura \u00b6 Boot do SSD \u00b6 Vamos utilizar o SSD do 3\u00b0semestre de engenharia de computa\u00e7\u00e3o para nossa atividade. Se voc\u00ea possui o SSD do 3\u00b0sem. fa\u00e7a o boot no seu PC. Caso n\u00e3o tenha, n\u00e3o tem problema, vamos emprestar um SSD para usar durante a aula. Exercise Fa\u00e7a o Boot do SSD no seu PC, caso tenha dificuldades pe\u00e7a ajuda. O usu\u00e1rio e senha padr\u00e3o do SSD \u00e9: user: borg senha: fl1pfl0p Clone do reposit\u00f3rio \u00b6 Vamos utilizar alguns exemplos durante a aula que est\u00e3o neste reposit\u00f3rio, nosso pr\u00f3ximo passo clonar esse reposit\u00f3rio. Exercise Fa\u00e7a clone deste reposit\u00f3rio no diret\u00f3rio ~/catkin_ws/src os comandos para isso est\u00e3o abaixo, abra um terminal e digite : cd ~/catkin_ws/src git clone https://github.com/arnaldojr/ac-drone cd ~/catkin_ws catkin_make Warning Avalie o log do terminal para saber se deu tudo certo. Conex\u00e3o entre PC e o DRONE \u00b6 Warning AINDA NAO \u00c9 HORA DE DECOLAR, O DRONE DEVE ESTAR SEM HELICES!! Como o vou comunicar o meu c\u00f3digo do pc com o drone \u00b6 A topologia que vamos utilizar em nossa aplica\u00e7\u00e3o ser\u00e1: O drone est\u00e1 configurado como Acess Point, ou seja o drone ir\u00e1 fornecer um ponto de rede Wifi para que outros dispositivos se conectem a ele. O nome desta rede \u00e9 `bebop seguida do serial number do drone Vamos conectar o Wifi do nosso computador na rede criada pelo drone do drone. Warning A rede do bebop n\u00e3o tem senha, basta se conectar. Esta rede n\u00e3o possui acesso internet, se precisar usar internet ter\u00e1 que trocar a rede wifi. Exercise Identifique o serial number do drone que vai usar, tem uma etiqueta colada informando o numero; ligue o drone e conecte seu notebook na rede wifi do drone; Abra um terminal novo e digite: ./bebop.sh A conex\u00e3o ir\u00e1 acontecer, monitore o log do terminal; Se tudo deu certo, o drone o PC est\u00e3o conectados e pronto para ser utilizado. Warning AINDA NAO \u00c9 HORA DE DECOLAR, O DRONE DEVE ESTAR SEM HELICES!! Analisando t\u00f3picos, nodes e imagem \u00b6 Agora que j\u00e1 temos o drone o PC conectados, vamos aprender alguns comandos de ROS: Warning No ROS \u00e9 comum trabalhar com multiplos terminais abertos, cada terminal ter\u00e1 uma fun\u00e7\u00e3o especifica, por essa raz\u00e3o tenha cuidado para n\u00e3o fechar o terminal errado. Abra um terminal novo, n\u00e3o feche o terminal anterior, vamos explorar os principais comados: Listar os t\u00f3picos do drone: rostopic list Abrir a camera do drone: rqt_image_view Visualizar a msg de um t\u00f3pico: rostopic echo /debop/odom Decolar(takeoff) o drone: ***com o drone sem helices, cuidado os motores v\u00e3o ligar** rostopic pub --once /bebop/takeoff std_msgs/Empty Pousar (land) o drone: rostopic pub --once /bebop/land std_msgs/Empty Legal, estamos come\u00e7ando a entender como as coisas funcionam. Podemos controlar o drone com os comandos do terminal, mas n\u00e3o \u00e9 eficiente. Vamos criar um script python para isso. Progress Continuar... Entendo o c\u00f3digo Python/ROS \u00b6 Existem algumas formas de criar um script python, Vamos dar uma olhada em um c\u00f3digo pronto e an\u00e1lisar a sua estrutura. Vamos avaliar o c\u00f3digo print_odom.py que est\u00e1 neste reposit\u00f3rio na pasta exemplos_drone/scripts/print_odom.py Este c\u00f3digo ir\u00e1 exibir no terminal o valor da odometria (dist\u00e2ncia percorrida) pelo drone nas coordenadas lineares x, y e z. #! /usr/bin/env python3 # -*- coding:utf-8 -*- import rospy from std_msgs.msg import Empty from nav_msgs.msg import Odometry # Apenas valores para inicializar x = - 1000 y = - 1000 z = - 1000 def recebeu_leitura ( dado ): \"\"\" Grava nas vari\u00e1veis x,y,z a posi\u00e7\u00e3o extra\u00edda da odometria Aten\u00e7\u00e3o: *n\u00e3o coincidem* com o x,y,z locais do drone \"\"\" global x global y global z x = dado . pose . pose . position . x y = dado . pose . pose . position . y z = dado . pose . pose . position . z if __name__ == \"__main__\" : rospy . init_node ( \"print_odom\" ) # Cria um subscriber que chama recebeu_leitura sempre que houver nova odometria recebe_odom = rospy . Subscriber ( \"bebop/odom\" , Odometry , recebeu_leitura ) try : while not rospy . is_shutdown (): ## C\u00f3digo principal print ( \"x {} y {} z {} \" . format ( x , y , z )) rospy . sleep ( 2 ) except rospy . ROSInterruptException : rospy . sleep ( 1.0 ) Vamos avaliar o c\u00f3digo por partes. Come\u00e7amos informando que vamos usar python3 no nosso c\u00f3digo e que realizamos o importe das bibliotecas da ROS e da ROS Msg para compreender o formato das mensagens que vamos utilizar. Esses importes variam conforme o t\u00f3pico que vamos utilizar #! /usr/bin/env python3 # -*- coding:utf-8 -*- import rospy from std_msgs.msg import Empty from nav_msgs.msg import Odometry Criamos e inicializamos as variaveis x, y e z. Criamos uma fun\u00e7\u00e3o de callback chamada `recebeu_leitura que ser\u00e1 chamada toda a vez que houver um dado novo do t\u00f3pico da odometria (que \u00e9 configurado mais abaixo). Note que e ROS as chamadas s\u00e3o baseadas das fun\u00e7\u00f5es de callback ocorrem por evento, de forma assincrona. Ou seja, n\u00e3o ser\u00e3o feitas pelo c\u00f3digo principal. # Apenas valores para inicializar x = - 1000 y = - 1000 z = - 1000 def recebeu_leitura ( dado ): \"\"\" Grava nas vari\u00e1veis x,y,z a posi\u00e7\u00e3o extra\u00edda da odometria Aten\u00e7\u00e3o: *n\u00e3o coincidem* com o x,y,z locais do drone \"\"\" global x global y global z x = dado . pose . pose . position . x y = dado . pose . pose . position . y z = dado . pose . pose . position . z Inicializa o node \"print_odom\" para ser identificado pelo ROS master. Subscreve (esculta) o t\u00f3pico de odometria e realiza a chamada da fun\u00e7\u00e3o de callback \"recebeu_leitura\" if __name__ == \"__main__\" : rospy . init_node ( \"print_odom\" ) # Cria um subscriber que chama recebeu_leitura sempre que houver nova odometria recebe_odom = rospy . Subscriber ( \"bebop/odom\" , Odometry , recebeu_leitura ) Nosso la\u00e7o principal, o while \u00e9 executdo de forma infinita at\u00e9 o usu\u00e1rio fechar o programa. O rospy.sleep(2) executa um loop a cada 2 segundos. try : while not rospy . is_shutdown (): ## C\u00f3digo principal print ( \"x {} y {} z {} \" . format ( x , y , z )) rospy . sleep ( 2 ) except rospy . ROSInterruptException : rospy . sleep ( 1.0 ) Agora que j\u00e1 entendemos, de forma breve, como o c\u00f3digo funciona vamos rodar nosso c\u00f3digo com o drone. Rodando o c\u00f3digo no drone \u00b6 Vamso rodar o nosso exemplo print_odom.py . Rodar um script python \u00e9 um pouco diferente de rodar um c\u00f3digo ROS em python, isso por que o ROS cria um ecosistema para rodar esse c\u00f3digo, ent\u00e3o a forma que vamos invocar o c\u00f3digo ser\u00e1: Em um novo terminal, digite: rosrun exemplo_drone print_odom.py Para dar certo, o nosso notebook e o drone devem estar na mesma rede wifi e o comando bebop.sh tambem j\u00e1 est\u00e1 rodando. Caso o valores de odometria n\u00e3o atualize, fa\u00e7a o takeoff do drone (sem helice) antes e rode novamente.","title":"Voando sem sair do ch\u00e3o"},{"location":"aulas/lab1/#o-que-esse-vamos-ver-neste-lab","text":"Decolando sem sair do ch\u00e3o Configura\u00e7\u00e3o da infraestrutura Boot do SSD no notebook clone do reposit\u00f3rio Configura\u00e7\u00f5es iniciais com o drone Conex\u00e3o entre PC e Drone Ajustando a conex\u00e3o entre o drone e o notebook Analisando t\u00f3picos, nodes e imagem Primeiro projeto Entendo o c\u00f3digo Python/ROS Rodando o c\u00f3digo no Drone Desafio1 chegou a hora de criar asas e voar!","title":"O que esse vamos ver neste lab?"},{"location":"aulas/lab1/#configuracao-da-infraestrura","text":"","title":"Configura\u00e7\u00e3o da Infraestrura"},{"location":"aulas/lab1/#boot-do-ssd","text":"Vamos utilizar o SSD do 3\u00b0semestre de engenharia de computa\u00e7\u00e3o para nossa atividade. Se voc\u00ea possui o SSD do 3\u00b0sem. fa\u00e7a o boot no seu PC. Caso n\u00e3o tenha, n\u00e3o tem problema, vamos emprestar um SSD para usar durante a aula. Exercise Fa\u00e7a o Boot do SSD no seu PC, caso tenha dificuldades pe\u00e7a ajuda. O usu\u00e1rio e senha padr\u00e3o do SSD \u00e9: user: borg senha: fl1pfl0p","title":"Boot do SSD"},{"location":"aulas/lab1/#clone-do-repositorio","text":"Vamos utilizar alguns exemplos durante a aula que est\u00e3o neste reposit\u00f3rio, nosso pr\u00f3ximo passo clonar esse reposit\u00f3rio. Exercise Fa\u00e7a clone deste reposit\u00f3rio no diret\u00f3rio ~/catkin_ws/src os comandos para isso est\u00e3o abaixo, abra um terminal e digite : cd ~/catkin_ws/src git clone https://github.com/arnaldojr/ac-drone cd ~/catkin_ws catkin_make Warning Avalie o log do terminal para saber se deu tudo certo.","title":"Clone do reposit\u00f3rio"},{"location":"aulas/lab1/#conexao-entre-pc-e-o-drone","text":"Warning AINDA NAO \u00c9 HORA DE DECOLAR, O DRONE DEVE ESTAR SEM HELICES!!","title":"Conex\u00e3o entre PC e o DRONE"},{"location":"aulas/lab1/#como-o-vou-comunicar-o-meu-codigo-do-pc-com-o-drone","text":"A topologia que vamos utilizar em nossa aplica\u00e7\u00e3o ser\u00e1: O drone est\u00e1 configurado como Acess Point, ou seja o drone ir\u00e1 fornecer um ponto de rede Wifi para que outros dispositivos se conectem a ele. O nome desta rede \u00e9 `bebop seguida do serial number do drone Vamos conectar o Wifi do nosso computador na rede criada pelo drone do drone. Warning A rede do bebop n\u00e3o tem senha, basta se conectar. Esta rede n\u00e3o possui acesso internet, se precisar usar internet ter\u00e1 que trocar a rede wifi. Exercise Identifique o serial number do drone que vai usar, tem uma etiqueta colada informando o numero; ligue o drone e conecte seu notebook na rede wifi do drone; Abra um terminal novo e digite: ./bebop.sh A conex\u00e3o ir\u00e1 acontecer, monitore o log do terminal; Se tudo deu certo, o drone o PC est\u00e3o conectados e pronto para ser utilizado. Warning AINDA NAO \u00c9 HORA DE DECOLAR, O DRONE DEVE ESTAR SEM HELICES!!","title":"Como o vou comunicar o meu c\u00f3digo do pc com o drone"},{"location":"aulas/lab1/#analisando-topicos-nodes-e-imagem","text":"Agora que j\u00e1 temos o drone o PC conectados, vamos aprender alguns comandos de ROS: Warning No ROS \u00e9 comum trabalhar com multiplos terminais abertos, cada terminal ter\u00e1 uma fun\u00e7\u00e3o especifica, por essa raz\u00e3o tenha cuidado para n\u00e3o fechar o terminal errado. Abra um terminal novo, n\u00e3o feche o terminal anterior, vamos explorar os principais comados: Listar os t\u00f3picos do drone: rostopic list Abrir a camera do drone: rqt_image_view Visualizar a msg de um t\u00f3pico: rostopic echo /debop/odom Decolar(takeoff) o drone: ***com o drone sem helices, cuidado os motores v\u00e3o ligar** rostopic pub --once /bebop/takeoff std_msgs/Empty Pousar (land) o drone: rostopic pub --once /bebop/land std_msgs/Empty Legal, estamos come\u00e7ando a entender como as coisas funcionam. Podemos controlar o drone com os comandos do terminal, mas n\u00e3o \u00e9 eficiente. Vamos criar um script python para isso. Progress Continuar...","title":"Analisando t\u00f3picos, nodes e imagem"},{"location":"aulas/lab1/#entendo-o-codigo-pythonros","text":"Existem algumas formas de criar um script python, Vamos dar uma olhada em um c\u00f3digo pronto e an\u00e1lisar a sua estrutura. Vamos avaliar o c\u00f3digo print_odom.py que est\u00e1 neste reposit\u00f3rio na pasta exemplos_drone/scripts/print_odom.py Este c\u00f3digo ir\u00e1 exibir no terminal o valor da odometria (dist\u00e2ncia percorrida) pelo drone nas coordenadas lineares x, y e z. #! /usr/bin/env python3 # -*- coding:utf-8 -*- import rospy from std_msgs.msg import Empty from nav_msgs.msg import Odometry # Apenas valores para inicializar x = - 1000 y = - 1000 z = - 1000 def recebeu_leitura ( dado ): \"\"\" Grava nas vari\u00e1veis x,y,z a posi\u00e7\u00e3o extra\u00edda da odometria Aten\u00e7\u00e3o: *n\u00e3o coincidem* com o x,y,z locais do drone \"\"\" global x global y global z x = dado . pose . pose . position . x y = dado . pose . pose . position . y z = dado . pose . pose . position . z if __name__ == \"__main__\" : rospy . init_node ( \"print_odom\" ) # Cria um subscriber que chama recebeu_leitura sempre que houver nova odometria recebe_odom = rospy . Subscriber ( \"bebop/odom\" , Odometry , recebeu_leitura ) try : while not rospy . is_shutdown (): ## C\u00f3digo principal print ( \"x {} y {} z {} \" . format ( x , y , z )) rospy . sleep ( 2 ) except rospy . ROSInterruptException : rospy . sleep ( 1.0 ) Vamos avaliar o c\u00f3digo por partes. Come\u00e7amos informando que vamos usar python3 no nosso c\u00f3digo e que realizamos o importe das bibliotecas da ROS e da ROS Msg para compreender o formato das mensagens que vamos utilizar. Esses importes variam conforme o t\u00f3pico que vamos utilizar #! /usr/bin/env python3 # -*- coding:utf-8 -*- import rospy from std_msgs.msg import Empty from nav_msgs.msg import Odometry Criamos e inicializamos as variaveis x, y e z. Criamos uma fun\u00e7\u00e3o de callback chamada `recebeu_leitura que ser\u00e1 chamada toda a vez que houver um dado novo do t\u00f3pico da odometria (que \u00e9 configurado mais abaixo). Note que e ROS as chamadas s\u00e3o baseadas das fun\u00e7\u00f5es de callback ocorrem por evento, de forma assincrona. Ou seja, n\u00e3o ser\u00e3o feitas pelo c\u00f3digo principal. # Apenas valores para inicializar x = - 1000 y = - 1000 z = - 1000 def recebeu_leitura ( dado ): \"\"\" Grava nas vari\u00e1veis x,y,z a posi\u00e7\u00e3o extra\u00edda da odometria Aten\u00e7\u00e3o: *n\u00e3o coincidem* com o x,y,z locais do drone \"\"\" global x global y global z x = dado . pose . pose . position . x y = dado . pose . pose . position . y z = dado . pose . pose . position . z Inicializa o node \"print_odom\" para ser identificado pelo ROS master. Subscreve (esculta) o t\u00f3pico de odometria e realiza a chamada da fun\u00e7\u00e3o de callback \"recebeu_leitura\" if __name__ == \"__main__\" : rospy . init_node ( \"print_odom\" ) # Cria um subscriber que chama recebeu_leitura sempre que houver nova odometria recebe_odom = rospy . Subscriber ( \"bebop/odom\" , Odometry , recebeu_leitura ) Nosso la\u00e7o principal, o while \u00e9 executdo de forma infinita at\u00e9 o usu\u00e1rio fechar o programa. O rospy.sleep(2) executa um loop a cada 2 segundos. try : while not rospy . is_shutdown (): ## C\u00f3digo principal print ( \"x {} y {} z {} \" . format ( x , y , z )) rospy . sleep ( 2 ) except rospy . ROSInterruptException : rospy . sleep ( 1.0 ) Agora que j\u00e1 entendemos, de forma breve, como o c\u00f3digo funciona vamos rodar nosso c\u00f3digo com o drone.","title":"Entendo o c\u00f3digo Python/ROS"},{"location":"aulas/lab1/#rodando-o-codigo-no-drone","text":"Vamso rodar o nosso exemplo print_odom.py . Rodar um script python \u00e9 um pouco diferente de rodar um c\u00f3digo ROS em python, isso por que o ROS cria um ecosistema para rodar esse c\u00f3digo, ent\u00e3o a forma que vamos invocar o c\u00f3digo ser\u00e1: Em um novo terminal, digite: rosrun exemplo_drone print_odom.py Para dar certo, o nosso notebook e o drone devem estar na mesma rede wifi e o comando bebop.sh tambem j\u00e1 est\u00e1 rodando. Caso o valores de odometria n\u00e3o atualize, fa\u00e7a o takeoff do drone (sem helice) antes e rode novamente.","title":"Rodando o c\u00f3digo no drone"},{"location":"aulas/lab1/index2/","text":"hora de decolar! \u00b6 Vamos voar! Com o drone na quadra, com helices colocadas e j\u00e1 posicionado e configurado. Rode os comandos de inicializa\u00e7\u00e3o Fa\u00e7a o takeoff do drone. Vamos controlar o drone pelo teclado do computador, em um novo terminal digite: rosrun teleop_twist_keyboard teleop_twist_keyboard.py cmd_vel:=/bebop/cmd_vel - teleoperar o drone com o teclado Entenda os comandos do teclado para controlar o drone. Com o drone no ar. Abra um novo terminal e rode o seu c\u00f3digo novamente print_odom.py novamente. \u00c9 esperado ver no terminal os valores de odometria.","title":"Decolando"},{"location":"aulas/lab1/index2/#hora-de-decolar","text":"Vamos voar! Com o drone na quadra, com helices colocadas e j\u00e1 posicionado e configurado. Rode os comandos de inicializa\u00e7\u00e3o Fa\u00e7a o takeoff do drone. Vamos controlar o drone pelo teclado do computador, em um novo terminal digite: rosrun teleop_twist_keyboard teleop_twist_keyboard.py cmd_vel:=/bebop/cmd_vel - teleoperar o drone com o teclado Entenda os comandos do teclado para controlar o drone. Com o drone no ar. Abra um novo terminal e rode o seu c\u00f3digo novamente print_odom.py novamente. \u00c9 esperado ver no terminal os valores de odometria.","title":"hora de decolar!"},{"location":"aulas/lab2/","text":"Raspberry PI \u00b6 At\u00e9 este momento do nosso curso, desenvolvemos pequenos projetos envolvendo sensores/atuadores e o nosso hardware(placa de desenvolvimento) foi o Arduino UNO, al\u00e9m disso aprendemos como integrar com Python e Node-Red. Neste laborat\u00f3rio vamos come\u00e7ar nossa jornada de computa\u00e7\u00e3o embarcada com aplica\u00e7\u00f5es voltadas paara a Internet das Coisas com o hardware Raspberry PI . Nesta etapa vamos ver dentre outras coisas: o que \u00e9 a Respberry Pi, Sistema Operacional Linux, como dar boot na placa Raspberry PI, como configurar e utilizar os GPIO - Pinos de Entrada/Saida, como realizar integra\u00e7\u00e3o com Arduino, Node-Red e muito mais... O que vamos ver neste lab? \u00b6 Raspberry PI: o que \u00e9? Qual a diferen\u00e7a para o Arduino? Raspberry Pi: Getting Started Overview - Conhecendo o hardware Flash SD Card - Como dar boot do Sistema Operacional na Raspberry PI Modos de uso - GUI x Headless Headless - Configurando acesso SSH e rede Wifi. Headless - VNC Viewer GUI - Modo Desktop Controlando os GPIO - Blink LED. Controle por CLI Shell Script ... Raspberry PI x Arduino \u00b6 Antes de falar da Raspberry PI, vamos lembrar que o Arduino UNO, que usamos, possui um microcontrolador de 8-bit link do datasheet . Sua arquitetura RISC \u00e9 simples, e cobre bem os requisitos m\u00ednimos de um sistema embarcado. Contudo, n\u00e3o \u00e9 possivel rodar um sistema operacional completo, o que pode limitar algumas possibiildades de sistemas mais complexos. Para rodar um Sistema Operacional completo precissamos de um processador por exemplo o processador Intel 386, I5, I7, Celeron e muitos outros (link do datasheet de um Intel I7) que usamos em nossos notebooks e desktops por exemplo. Em apica\u00e7\u00f5es de computa\u00e7\u00e3o embarcada geralmente usamos um substituto para o notebook ou desktop, para atender requisitos tecnicos de custo, consumo de energia, peso, tamanho dentre outros... nesses casos podemos utilizar SBC (Single Board Computer). Os computadores de placa \u00fanica (SBC) s\u00e3o computadores completos (combina\u00e7\u00e3o de um processador, mem\u00f3ria, suporte de rede, video, audio, entrada e sa\u00edda e outros...) em uma placa s\u00f3, com a vantagem de ser de baixo custo e possuir pequenas dimens\u00f5es comparado ao computador convensional. \u00c9 neste ponto que vamos come\u00e7ar a falar da Raspberry PI que \u00e9 a mais famosa e mais conhecida SBC e que suporta um Sistema Operacional Embarcado (Linux) ou seja, com ela \u00e9 possivel desenvolver e implementar uma infinidade de projetos. A placa Raspberry Pi foi lan\u00e7ada em 2012 pela Raspberry Pi Fundation, sendo uma classe de pequenos computadores port\u00e1teis de baix\u00edssimo custo, baseado nos processadores multim\u00eddia de arquitetura ARM da Broadcom, o mesmo que utilizados para celulares. O projeto foi um sucesso, vem crescendo e se atualizando, hoje temos diversos modelos para diversas aplica\u00e7\u00f5es diferentes como a Raspberry PI 3, 4, Zero e outros. link da documenta\u00e7\u00e3o oficial Link para conhecer outros modelos de SBC Agora que j\u00e1 entendemos um pouco o que \u00e9 Raspberry PI, vamos aprender a usar.... Progress Continuar... Raspbeery PI - Getting Started \u00b6 Overview \u00b6 Existem varios modelos de Raspberry PI, em nosso curso vamos utilizar a Raspberry PI 3 Model B+ . Para complementar: Fonte de Alimenta\u00e7\u00e3o: 5V @ >2A Cart\u00e3o SD Card: micro SD Card >8GB Classe 10 ou superior Sistema Operacional \u00b6 Podemos utilizar diversas distribu\u00e7\u00f5es na RBI, dentre elas as mais comuns s\u00e3o: Raspbian - SO de uso geral Ubuntu - SO de uso geral RetroPie - Emulador de video game OSMC - Media Center Home Assistent - Automa\u00e7\u00e3o Resid\u00eancial E muitos outross... Fim da teoria, vamos pra parte pr\u00e1tica!! Leia com aten\u00e7\u00e3o este guia e siga todos os passos. Progress Continuar... Flash SD Card \u00b6 O SO (Sistema Operacional) da RPI fica armazenado no micro SD Card que deve ser de pelo menos 8GB Classe 10 ou superior, existem diversas formas de realizar a grava\u00e7\u00e3o do SO, para isso se prepare pois chegou a hora de por a m\u00e3o na massa. As outras vers\u00f5es do SO podem ser encontras no link https://www.raspberrypi.com/software/operating-systems/ . Em nosso curso vamos utlizar o Raspberry Pi OS (legacy) baseado na Distribui\u00e7\u00e3o Debian 10 (Buster). Info Pra facilitar, o link para downlod j\u00e1 est\u00e1 aqui Para gravar o SD Card podemos utilizar algumas op\u00e7\u00f5es o mais simples \u00e9 o Balena Etcher que roda em diversas plataformas. Para facilitar, o link para download do balena Etcher https://www.balena.io/etcher/ Exercise Agora voc\u00ea deve: - Remova o SD Card da RPI, conecte o cart\u00e3o ao adaptador USB e plugue no seu notebook - Fa\u00e7a o Download do RPI OS - Fa\u00e7a o Download do Balena Etcher - No seu notebook, Abrir o Balena Etcher e siguir os passos para gravar o SD Card - Ap\u00f3s a grava\u00e7\u00e3o remova o adaptador da USB e conecte no computador novamente. - Se tudo deu certo: - Ir\u00e3o aparecer duas partici\u00e7\u00f5es referentes, sendo uma delas chamada \"boot\" - Caso contr\u00e1rio, alguma coisa deu errada, formate o SD Card em FAT32 e grave novamente. Progress Continuar... Modo de uso - Interface Gr\u00e1fica \u00b6 Apenas para conhecimento extra, pois n\u00e3o \u00e9 desta forma que vamos usar a Raspberry PI em nosso curso Para utilizar a Raspberry como um computador normal \u00e9 muito simples basta conectar na Raspberry PI: O SD Card gravado, um monitor HDMI, um teclado e um mouse. Com tudo conectado corretamente conecte a fonte de alimenta\u00e7\u00e3o 5V, o sistema operacional ir\u00e1 inicializar e voc\u00ea pode usar :) . Modo de uso - Headless \u00b6 Agora sim! Aten\u00e7\u00e3o nos pr\u00f3ximos passos... Vamos utilizar o Rasbperry PI no modo Headless , ou seja, sem conectar monitor, teclado e mouse. Para utilizar este modo \u00e9 necess\u00e1rio realizar algumas configura\u00e7\u00f5es no micro SD Card antes de dar boot na Raspberry PI. Habilitar SSH \u00b6 Para habilitar o SSH \u00e9 necess\u00e1rio criar um arquivo vazio (sem extens\u00e3o) chamado ssh dentro da pasta boot. Exercise Agora voc\u00ea deve: - Conecte o micro SD Card no adaptador USB, e plugue no notebook - Acesse a parti\u00e7\u00e3o chamada boot - crie um arquivo chamado ssh na raiz da parti\u00e7\u00e3o boot - este arquivo n\u00e3o possui extens\u00e3o O resultado esperado deve ser semelhante ao da imagem abaixo: Progress Continuar... Configura\u00e7\u00e3o de Rede Wi-fi \u00b6 A configura\u00e7\u00e3o de rede do Wi-fi \u00e9 feita atrav\u00e9s da configura\u00e7\u00e3o de um arquivo chamado wpa_supplicant.conf que deve ser criado dentro da pasta boot. Exercise Agora voc\u00ea deve: - crie um arquivo chamado wpa_supplicant.conf na raiz da parti\u00e7\u00e3o boot - abra o arquivo criado com algum editor de texto (bloco de notas ou vscode) - configure o arquivo da mesma forma que o texto abaixo Neste ponto \u00e9 importe ter uma rede wifi para se conecetar. Temos 2 op\u00e7\u00f5es de redes: Personal e Enterprise (Recomendado) - Para uma rede personal use a configura\u00e7\u00e3o abaixo. Esta configura\u00e7\u00e3o \u00e9 a mais indicada e segura para ser usada em aula, para isso rotei a internet de seu celular. Personal: (RECOMENDADO) - Use o roteador da sua casa ou habilite seu Celular como Roteador country = BR ctrl_interface = DIR = /var/run/wpa_supplicant GROUP = netdev update_config = 1 network ={ scan_ssid = 1 ssid = \"COLOQUEO_O_NOME_DA_REDE\" psk = \"COLOQUE_A_SENHA_DA_REDE\" } * Enterprise: Redes WPA2 A rede da FIAP requer autentica\u00e7\u00e3o enterprise, n\u00e3o recomendo pois seu usu\u00e1rio e senha ficar\u00e1 salvo na raspberry pi e qualquer pessoa mal intencionada pode se utiizar desta vulnerabilidade. ```shell # Connect to a WPA2 Enterprise network with wpa_supplicant with this .conf file. # I used this to connect to my university's wireless network on Arch linux. # Here's the command I used: # # wpa_supplicant -i wlan0 -c ./wpa_supplicant.conf # network={ ssid=\"YOUR_SSID\" scan_ssid=1 key_mgmt=WPA-EAP identity=\"YOUR_USERNAME\" password=\"YOUR_PASSWORD\" eap=PEAP phase1=\"peaplabel=0\" phase2=\"auth=MSCHAPV2\" } ``` Configura\u00e7\u00e3o finalizada! Agora vamos ligar! Progress Continuar... Boot Raspberry PI \u00b6 Para ter acesso SSH ao raspberry PI vamos utilizar o o software PuTTy . Para facilitar, o link para download do PuTY https://www.putty.org/ Agora com tudo configurado e instalado chegou a hora de ligar e testar. O seu notebook e a raspberry pi devem estar na mesma rede Wifi do seu Smartphone/Roteador como indica a imagem abaixo. Exercise Agora voc\u00ea deve: - Conecte o micro SD Card na Raspberry PI - Mantenha sua rede wifi ligada (Smartphone como roteador) - Conecte seu computador(notebook) na mesma rede Wifi configurada na Raspbeery Pi - Ligue a fonte de alimenta\u00e7\u00e3o na raspberry pi - Aguarde alguns segundos e vefifique o ip que foi atribuido ao Raspberry PI - No seu computador, abra o puTTY e digite o ip da Raspberry PI - Se tudo estiver correto, um terminal ir\u00e1 abrir e vai solicitar login e senha Por padr\u00e3o, o login e senha da raspberry pi ser\u00e1: login: pi senha: raspberry Finalizado! Agora estamos com nosso raspberry conectado e funcionando. Progress Continuar... Primeiro teste da raspberry \u00b6 Vamos fazer o nosso helloWord com a Raspberry Pi, apenas para testar, Monte o circuito da imagem abaixo: Agora no terminal da Raspberry Pi execute os comando de forma sequencial: # Seta o pino GPIO 17 e configura como saida (output) echo \"17\" > /sys/class/gpio/export echo \"out\" > /sys/class/gpio/gpio17/direction # Escreve na saida do led (nivel logico alto) echo \"1\" > /sys/class/gpio/gpio17/value # Escreve na saida do led (nivel logico baixo) echo \"0\" > /sys/class/gpio/gpio17/value # libera o pino echo \"17\" > /sys/class/gpio/unexport Se tudo deu certo at\u00e9 este ponto, conseguimos ver o led Apagar e acender. Exercise Agora \u00e9 com voc\u00ea, o Raspberry PI permite o acesso aos seus pinos com o uso de diversas linguagens de programa\u00e7\u00e3o diferentes, escolha uma de sua prefer\u00eancia e monte um c\u00f3digo que fa\u00e7a o led Piscar no intervalo de 1 seg. Dica: Pesquise na internet por exemplos, exemplos","title":"Index"},{"location":"aulas/lab2/#raspberry-pi","text":"At\u00e9 este momento do nosso curso, desenvolvemos pequenos projetos envolvendo sensores/atuadores e o nosso hardware(placa de desenvolvimento) foi o Arduino UNO, al\u00e9m disso aprendemos como integrar com Python e Node-Red. Neste laborat\u00f3rio vamos come\u00e7ar nossa jornada de computa\u00e7\u00e3o embarcada com aplica\u00e7\u00f5es voltadas paara a Internet das Coisas com o hardware Raspberry PI . Nesta etapa vamos ver dentre outras coisas: o que \u00e9 a Respberry Pi, Sistema Operacional Linux, como dar boot na placa Raspberry PI, como configurar e utilizar os GPIO - Pinos de Entrada/Saida, como realizar integra\u00e7\u00e3o com Arduino, Node-Red e muito mais...","title":"Raspberry PI"},{"location":"aulas/lab2/#o-que-vamos-ver-neste-lab","text":"Raspberry PI: o que \u00e9? Qual a diferen\u00e7a para o Arduino? Raspberry Pi: Getting Started Overview - Conhecendo o hardware Flash SD Card - Como dar boot do Sistema Operacional na Raspberry PI Modos de uso - GUI x Headless Headless - Configurando acesso SSH e rede Wifi. Headless - VNC Viewer GUI - Modo Desktop Controlando os GPIO - Blink LED. Controle por CLI Shell Script ...","title":"O que vamos ver neste lab?"},{"location":"aulas/lab2/#raspberry-pi-x-arduino","text":"Antes de falar da Raspberry PI, vamos lembrar que o Arduino UNO, que usamos, possui um microcontrolador de 8-bit link do datasheet . Sua arquitetura RISC \u00e9 simples, e cobre bem os requisitos m\u00ednimos de um sistema embarcado. Contudo, n\u00e3o \u00e9 possivel rodar um sistema operacional completo, o que pode limitar algumas possibiildades de sistemas mais complexos. Para rodar um Sistema Operacional completo precissamos de um processador por exemplo o processador Intel 386, I5, I7, Celeron e muitos outros (link do datasheet de um Intel I7) que usamos em nossos notebooks e desktops por exemplo. Em apica\u00e7\u00f5es de computa\u00e7\u00e3o embarcada geralmente usamos um substituto para o notebook ou desktop, para atender requisitos tecnicos de custo, consumo de energia, peso, tamanho dentre outros... nesses casos podemos utilizar SBC (Single Board Computer). Os computadores de placa \u00fanica (SBC) s\u00e3o computadores completos (combina\u00e7\u00e3o de um processador, mem\u00f3ria, suporte de rede, video, audio, entrada e sa\u00edda e outros...) em uma placa s\u00f3, com a vantagem de ser de baixo custo e possuir pequenas dimens\u00f5es comparado ao computador convensional. \u00c9 neste ponto que vamos come\u00e7ar a falar da Raspberry PI que \u00e9 a mais famosa e mais conhecida SBC e que suporta um Sistema Operacional Embarcado (Linux) ou seja, com ela \u00e9 possivel desenvolver e implementar uma infinidade de projetos. A placa Raspberry Pi foi lan\u00e7ada em 2012 pela Raspberry Pi Fundation, sendo uma classe de pequenos computadores port\u00e1teis de baix\u00edssimo custo, baseado nos processadores multim\u00eddia de arquitetura ARM da Broadcom, o mesmo que utilizados para celulares. O projeto foi um sucesso, vem crescendo e se atualizando, hoje temos diversos modelos para diversas aplica\u00e7\u00f5es diferentes como a Raspberry PI 3, 4, Zero e outros. link da documenta\u00e7\u00e3o oficial Link para conhecer outros modelos de SBC Agora que j\u00e1 entendemos um pouco o que \u00e9 Raspberry PI, vamos aprender a usar.... Progress Continuar...","title":"Raspberry PI x Arduino"},{"location":"aulas/lab2/#raspbeery-pi-getting-started","text":"","title":"Raspbeery PI - Getting Started"},{"location":"aulas/lab2/#overview","text":"Existem varios modelos de Raspberry PI, em nosso curso vamos utilizar a Raspberry PI 3 Model B+ . Para complementar: Fonte de Alimenta\u00e7\u00e3o: 5V @ >2A Cart\u00e3o SD Card: micro SD Card >8GB Classe 10 ou superior","title":"Overview"},{"location":"aulas/lab2/#sistema-operacional","text":"Podemos utilizar diversas distribu\u00e7\u00f5es na RBI, dentre elas as mais comuns s\u00e3o: Raspbian - SO de uso geral Ubuntu - SO de uso geral RetroPie - Emulador de video game OSMC - Media Center Home Assistent - Automa\u00e7\u00e3o Resid\u00eancial E muitos outross... Fim da teoria, vamos pra parte pr\u00e1tica!! Leia com aten\u00e7\u00e3o este guia e siga todos os passos. Progress Continuar...","title":"Sistema Operacional"},{"location":"aulas/lab2/#flash-sd-card","text":"O SO (Sistema Operacional) da RPI fica armazenado no micro SD Card que deve ser de pelo menos 8GB Classe 10 ou superior, existem diversas formas de realizar a grava\u00e7\u00e3o do SO, para isso se prepare pois chegou a hora de por a m\u00e3o na massa. As outras vers\u00f5es do SO podem ser encontras no link https://www.raspberrypi.com/software/operating-systems/ . Em nosso curso vamos utlizar o Raspberry Pi OS (legacy) baseado na Distribui\u00e7\u00e3o Debian 10 (Buster). Info Pra facilitar, o link para downlod j\u00e1 est\u00e1 aqui Para gravar o SD Card podemos utilizar algumas op\u00e7\u00f5es o mais simples \u00e9 o Balena Etcher que roda em diversas plataformas. Para facilitar, o link para download do balena Etcher https://www.balena.io/etcher/ Exercise Agora voc\u00ea deve: - Remova o SD Card da RPI, conecte o cart\u00e3o ao adaptador USB e plugue no seu notebook - Fa\u00e7a o Download do RPI OS - Fa\u00e7a o Download do Balena Etcher - No seu notebook, Abrir o Balena Etcher e siguir os passos para gravar o SD Card - Ap\u00f3s a grava\u00e7\u00e3o remova o adaptador da USB e conecte no computador novamente. - Se tudo deu certo: - Ir\u00e3o aparecer duas partici\u00e7\u00f5es referentes, sendo uma delas chamada \"boot\" - Caso contr\u00e1rio, alguma coisa deu errada, formate o SD Card em FAT32 e grave novamente. Progress Continuar...","title":"Flash SD Card"},{"location":"aulas/lab2/#modo-de-uso-interface-grafica","text":"Apenas para conhecimento extra, pois n\u00e3o \u00e9 desta forma que vamos usar a Raspberry PI em nosso curso Para utilizar a Raspberry como um computador normal \u00e9 muito simples basta conectar na Raspberry PI: O SD Card gravado, um monitor HDMI, um teclado e um mouse. Com tudo conectado corretamente conecte a fonte de alimenta\u00e7\u00e3o 5V, o sistema operacional ir\u00e1 inicializar e voc\u00ea pode usar :) .","title":"Modo de uso - Interface Gr\u00e1fica"},{"location":"aulas/lab2/#modo-de-uso-headless","text":"Agora sim! Aten\u00e7\u00e3o nos pr\u00f3ximos passos... Vamos utilizar o Rasbperry PI no modo Headless , ou seja, sem conectar monitor, teclado e mouse. Para utilizar este modo \u00e9 necess\u00e1rio realizar algumas configura\u00e7\u00f5es no micro SD Card antes de dar boot na Raspberry PI.","title":"Modo de uso - Headless"},{"location":"aulas/lab2/#habilitar-ssh","text":"Para habilitar o SSH \u00e9 necess\u00e1rio criar um arquivo vazio (sem extens\u00e3o) chamado ssh dentro da pasta boot. Exercise Agora voc\u00ea deve: - Conecte o micro SD Card no adaptador USB, e plugue no notebook - Acesse a parti\u00e7\u00e3o chamada boot - crie um arquivo chamado ssh na raiz da parti\u00e7\u00e3o boot - este arquivo n\u00e3o possui extens\u00e3o O resultado esperado deve ser semelhante ao da imagem abaixo: Progress Continuar...","title":"Habilitar SSH"},{"location":"aulas/lab2/#configuracao-de-rede-wi-fi","text":"A configura\u00e7\u00e3o de rede do Wi-fi \u00e9 feita atrav\u00e9s da configura\u00e7\u00e3o de um arquivo chamado wpa_supplicant.conf que deve ser criado dentro da pasta boot. Exercise Agora voc\u00ea deve: - crie um arquivo chamado wpa_supplicant.conf na raiz da parti\u00e7\u00e3o boot - abra o arquivo criado com algum editor de texto (bloco de notas ou vscode) - configure o arquivo da mesma forma que o texto abaixo Neste ponto \u00e9 importe ter uma rede wifi para se conecetar. Temos 2 op\u00e7\u00f5es de redes: Personal e Enterprise (Recomendado) - Para uma rede personal use a configura\u00e7\u00e3o abaixo. Esta configura\u00e7\u00e3o \u00e9 a mais indicada e segura para ser usada em aula, para isso rotei a internet de seu celular. Personal: (RECOMENDADO) - Use o roteador da sua casa ou habilite seu Celular como Roteador country = BR ctrl_interface = DIR = /var/run/wpa_supplicant GROUP = netdev update_config = 1 network ={ scan_ssid = 1 ssid = \"COLOQUEO_O_NOME_DA_REDE\" psk = \"COLOQUE_A_SENHA_DA_REDE\" } * Enterprise: Redes WPA2 A rede da FIAP requer autentica\u00e7\u00e3o enterprise, n\u00e3o recomendo pois seu usu\u00e1rio e senha ficar\u00e1 salvo na raspberry pi e qualquer pessoa mal intencionada pode se utiizar desta vulnerabilidade. ```shell # Connect to a WPA2 Enterprise network with wpa_supplicant with this .conf file. # I used this to connect to my university's wireless network on Arch linux. # Here's the command I used: # # wpa_supplicant -i wlan0 -c ./wpa_supplicant.conf # network={ ssid=\"YOUR_SSID\" scan_ssid=1 key_mgmt=WPA-EAP identity=\"YOUR_USERNAME\" password=\"YOUR_PASSWORD\" eap=PEAP phase1=\"peaplabel=0\" phase2=\"auth=MSCHAPV2\" } ``` Configura\u00e7\u00e3o finalizada! Agora vamos ligar! Progress Continuar...","title":"Configura\u00e7\u00e3o de Rede Wi-fi"},{"location":"aulas/lab2/#boot-raspberry-pi","text":"Para ter acesso SSH ao raspberry PI vamos utilizar o o software PuTTy . Para facilitar, o link para download do PuTY https://www.putty.org/ Agora com tudo configurado e instalado chegou a hora de ligar e testar. O seu notebook e a raspberry pi devem estar na mesma rede Wifi do seu Smartphone/Roteador como indica a imagem abaixo. Exercise Agora voc\u00ea deve: - Conecte o micro SD Card na Raspberry PI - Mantenha sua rede wifi ligada (Smartphone como roteador) - Conecte seu computador(notebook) na mesma rede Wifi configurada na Raspbeery Pi - Ligue a fonte de alimenta\u00e7\u00e3o na raspberry pi - Aguarde alguns segundos e vefifique o ip que foi atribuido ao Raspberry PI - No seu computador, abra o puTTY e digite o ip da Raspberry PI - Se tudo estiver correto, um terminal ir\u00e1 abrir e vai solicitar login e senha Por padr\u00e3o, o login e senha da raspberry pi ser\u00e1: login: pi senha: raspberry Finalizado! Agora estamos com nosso raspberry conectado e funcionando. Progress Continuar...","title":"Boot Raspberry PI"},{"location":"aulas/lab2/#primeiro-teste-da-raspberry","text":"Vamos fazer o nosso helloWord com a Raspberry Pi, apenas para testar, Monte o circuito da imagem abaixo: Agora no terminal da Raspberry Pi execute os comando de forma sequencial: # Seta o pino GPIO 17 e configura como saida (output) echo \"17\" > /sys/class/gpio/export echo \"out\" > /sys/class/gpio/gpio17/direction # Escreve na saida do led (nivel logico alto) echo \"1\" > /sys/class/gpio/gpio17/value # Escreve na saida do led (nivel logico baixo) echo \"0\" > /sys/class/gpio/gpio17/value # libera o pino echo \"17\" > /sys/class/gpio/unexport Se tudo deu certo at\u00e9 este ponto, conseguimos ver o led Apagar e acender. Exercise Agora \u00e9 com voc\u00ea, o Raspberry PI permite o acesso aos seus pinos com o uso de diversas linguagens de programa\u00e7\u00e3o diferentes, escolha uma de sua prefer\u00eancia e monte um c\u00f3digo que fa\u00e7a o led Piscar no intervalo de 1 seg. Dica: Pesquise na internet por exemplos, exemplos","title":"Primeiro teste da raspberry"},{"location":"aulas/lab3/","text":"O que vamos ver neste lab? \u00b6 Raspberry Pi: Conhecendo os pinos Usando a biblioteca RPI.GPIO Montando um Webserver em Flask Progress Continuar... Conhecendo os pinos da Raspberry Pi \u00b6 Podemos utilizar a Raspberry Pi para conectar sensores e atuadores, de forma semelhante como foi feito utilizando o Arduino, para isso utilizamos os barramento de pinos da Raspberry Pi chamado de GPIO (General Purpose Input Output). Ao todo s\u00e3o 40 pinos (para RPI 2 ou superior) e de forma geral cada pino possui uma fun\u00e7\u00e3o ou caracteristica especifica. Warning Cuidado: Devemos ter aten\u00e7\u00e3o para n\u00e3o conectar os perifericos na placa de forma incorreta. Existe risco de queimar a Raspberry Pi. A imagem abaixo \u00e9 um guia simples para cada pino. Parece complicado na primeira vez, mas \u00e9 tranquilo. Vamos conhecer o que \u00e9 cada pino: - Pinos de Alimenta\u00e7\u00e3o: - 3.3V (ao todo 2 pinos) - 5V (ao todo 2 pinos) - GND/Ground/0V (ao todo 8 pinos) - Pinos de interface: - GPIO (General purpose input and output): S\u00e3o os pinos de entrada/saida. A tens\u00e3o de saida \u00e9 de 3.3V. - I2C/SPI/UART: Protocolos de comunica\u00e7\u00e3o especificos utilizados para realizar a interface m\u00f3dulos epecificos com a Raspberry Pi. Warning Aten\u00e7\u00e3o: Observe a correla\u00e7\u00e3o dos pinos para n\u00e3o ligar invertido. Exercise Quantos pinos GPIO est\u00e3o disponiveis? Progress Continuar... Configurando os GPIOs \u00b6 No final do lab07 montamos um simples pisca led e programamos configurando os valores dos registradores. Existem formas mais simples de programar os GPIOs da rasbperry pi, vamos programar em Python :) Vamos utilizara biblioteca RPI.GPIO , que permite de forma simples configurar e usar os GPIOs com script em Python, vamos preparar o nosso ambiente de desenvolvimento: Exercise Inicialize a Raspberry Pi. (modo Desktop ou SSH). Se tiver d\u00favida de como fazer, volte para o lab07. Abra o terminal da raspberry pi. Certifique-se de estar com acesso a internet. No terminal da raspberry pi, atualize os reposit\u00f3rios: sudo apt update Em seguida, tente instalar o pacote RPi.GPIO: A documenta\u00e7\u00e3o da biblioteca est\u00e1 disponivel no aqui . sudo apt install rpi.gpio Se ainda n\u00e3o estiver instalado, ser\u00e1 instalado. Se j\u00e1 estiver instalado, ser\u00e1 atualizado se uma vers\u00e3o mais recente estiver dispon\u00edvel. Progress Continuar... Conhecendo a biblioteca RPi.GPIO \u00b6 \u00c9 uma biblioteca simples de usar e vamos ver as principais fun\u00e7\u00f5es da RPi.GPIO atrav\u00e9s do c\u00f3digo de exemplo abaixo: GPIO.setmode() = Define o modo de acesso aos pino da raspberry pi, existem 2 modos de definir a mesma coisa: GPIO.BOARD = Posi\u00e7\u00e3o f\u00edsica do pino na raspberry pi GPIO.BCM = Numero ap\u00f3s GPIOxx exemplo: BOARD 11 = GPIO17 GPIO.setup() = Define a fun\u00e7\u00e3o do pino, entrada (GPIO.IN) ou saida (GPIO.OUT) GPIO.output() = Define o estado do pino definido como saida em nivel logico baixo (GPIO.LOW) ou alto (GPIO.HIGH) GPIO.input() = Faz a leitura do estado do pino definido como entrada. Geralmente quando usamos um pino como entrada configuramos no setup o parametro pull_up_down (como exemplo: GPIO.setup(18, GPIO.IN, pull_up_down=GPIO.PUD_UP)) Exercise Monte o circuito abaixo: No terminal da RPI, digite: cd ~ mkdir src cd src touch blinkled.py Criamos um diretorio chamado src e um arquivo python chamado blinkled.py Abra o arquivo blinkled.py e escreva o c\u00f3digo abaixo. Para abrir o arquivo digite: nano blinkled.py Ap\u00f3s digitar o c\u00f3digo python, salve e feche o arquivo: Ctlr+X >>> Y Vamos rodar nosso c\u00f3digo python, no terminal digite: python blinkled.py Se tudo deu certo, o led est\u00e1 piscando. :) para interromper o c\u00f3digo aperte Ctrl+C. Warning Os 2 c\u00f3digos realizam a mesma fun\u00e7\u00e3o, a diferen\u00e7a est\u00e1 apenas no setmode . Escolha um dos c\u00f3digos para testar. import RPi.GPIO as GPIO ### import da biblioteca gpio import time # usando o a posi\u00e7\u00e3o fis\u00edca do pino na raspberry pi GPIO . setmode ( GPIO . BOARD ) # configura o pino fisico 11 como saida GPIO . setup ( 11 , GPIO . OUT ) whille True : # escreve no pino 11 nivel logico alto GPIO . output ( 11 , GPIO . HIGH ) time . sleep ( 1 ) # delay de 1s # escreve no pino 11 nivel logico baixo GPIO . output ( 11 , GPIO . LOW ) time . sleep ( 1 ) # delay de 1s GPIO . cleanup () # Limpa configura\u00e7\u00e3o finaliza o programa import RPi.GPIO as GPIO ### import da biblioteca gpio # usando o numero ap\u00f3s GPIOxx da raspberry pi GPIO . setmode ( GPIO . BCM ) # configura o GPIO17 como saida GPIO . setup ( 17 , GPIO . OUT ) whille True : # escreve no GPIO17 nivel logico alto GPIO . output ( 17 , GPIO . HIGH ) time . sleep ( 1 ) # delay de 1s # escreve no GPIO17 nivel logico baixo GPIO . output ( 17 , GPIO . LOW ) time . sleep ( 1 ) # delay de 1s GPIO . cleanup () # Limpa configura\u00e7\u00e3o finaliza o programa Agora que j\u00e1 entendemos a estrutura b\u00e1sica do script python, fa\u00e7a os exercicios abaixo para praticar Exercise Sem\u00e1faro de transito: - Monte um circuito com 3 leds (1 verde, 1 amarelo, 1 vermelho); - crie um novo script chamado semaforo.py; - Escreva um c\u00f3digo que ir\u00e1 acender os leds na sequ\u00eancia e intervalo: - Verde (5segundos) - Amarelo (3segundos) - Vermelho (6segundos) - loop (volta para o verde) Exercise leitura de bot\u00e3o e Led: Monte o circuito: Escreva um c\u00f3digo que: Enquanto nenhum bot\u00e3o for pressionado, os leds ficam apagados; Se o bot\u00e3o1 for pressionado: os leds acendem na sequ\u00eancia: Verde - Amarelo - Vermelho Se o bot\u00e3o2 for pressionado: os leds acendem na sequencia: Vermelho - Amarelo - Verde Dica: Geralmente quando usamos algum pino como entrada configuramos no setup o parametro pull_up_down (como exemplo: GPIO.setup(18, GPIO.IN, pull_up_down=GPIO.PUD_UP) ou GPIO.setup(18, GPIO.IN, pull_up_down=GPIO.PUD_DOWN). Exercise Sensor de temperatura: Para quem tiver curiosidade pode dar uma olhada como utilizar o sensor de temperatura DTH11 neste link . Progress Continuar... Montando um Webserver em Flask \u00b6 Vamos montar um webserver na raspberry pi com flask. A ideia deste exemplo \u00e9 controlar por um navegador web o status de um led entre ligado e desligado: Instalando o Flask e configurando o ambiente \u00b6 No terminal da raspberry pi, atualize os reposit\u00f3rios: sudo apt update Instale os pacotes do flask sudo apt-get install python3-flask Agora vamos criar nossa arvore de projeto: - webserver - static - index.css - templates - index.html - app.py No terminal da raspberry pi, digite: cd ~ mkdir webserver cd webserver mkdir static templates ls Vamos criar o app.py . No terminal da raspberry pi, digite: nano app.py Com o editor nano aberto digite: ''' Arnaldo Viana ''' import RPi.GPIO as GPIO from flask import Flask , render_template , request app = Flask ( __name__ ) GPIO . setmode ( GPIO . BCM ) GPIO . setwarnings ( False ) #define actuators GPIOs ledRed = 2 #initialize GPIO status variables ledRedSts = 0 # Define led pins as output GPIO . setup ( ledRed , GPIO . OUT ) # turn leds OFF GPIO . output ( ledRed , GPIO . LOW ) @app . route ( \"/\" ) def index (): # Read GPIO Status ledRedSts = GPIO . input ( ledRed ) templateData = { 'ledRed' : ledRedSts , } return render_template ( 'index.html' , ** templateData ) @app . route ( \"/<deviceName>/<action>\" ) def action ( deviceName , action ): if deviceName == 'ledRed' : actuator = ledRed if action == \"on\" : GPIO . output ( actuator , GPIO . HIGH ) if action == \"off\" : GPIO . output ( actuator , GPIO . LOW ) ledRedSts = GPIO . input ( ledRed ) templateData = { 'ledRed' : ledRedSts , } return render_template ( 'index.html' , ** templateData ) if __name__ == \"__main__\" : app . run ( host = '0.0.0.0' , port = 80 , debug = True ) show! Salve e feche o editor nano. Ctrl+X >> Y Vamos criar a pagina html index.html . No terminal da raspberry pi, digite: cd templates nano index.html Com o editor nano aberto digite: <!DOCTYPE html> < head > < title > Webserver </ title > < link rel = \"stylesheet\" href = '../static/index.css' /> </ head > < body > < h2 > Controle LED </ h2 > < h3 > RED LED ==> {{ ledRed }} ==> {% if ledRed == 1 %} < a href = \"/ledRed/off\" class = \"button\" > TURN OFF </ a > {% else %} < a href = \"/ledRed/on\" class = \"button\" > TURN ON </ a > {% endif %} </ h3 > </ body > </ html > show! Salve e feche o editor nano. Ctrl+X >> Y Vamos criar o arquivo de estilo css index.css . No terminal da raspberry pi, digite: cd .. cd static nano index.html Com o editor nano aberto digite: body { background : blue ; color : yellow ; } . button { font : bold 15 px Arial ; text-decoration : none ; background-color : #EEEEEE ; color : #333333 ; padding : 2 px 6 px 2 px 6 px ; border-collapse : separete ; border-spacing : 0 ; border-top : 1 px solid #CCCCCC ; border-right : 1 px solid #333333 ; border-bottom : 1 px solid #333333 ; border-left : 1 px solid #CCCCCC ; } show! Salve e feche o editor nano. Ctrl+X >> Y Hora de testar \u00b6 Vamos testar nosso webserver simples. No terminal da raspberry pi, digite: cd .. sudo python app.py Deixe o flask rodando na raspberry e no computador ou no smartphone (Deve estar na mesma rede da raspberry), abra o navegador web e digite o ip da raspberry pi. O resultado esperado \u00e9 abrir uma pagina web e controlar o led. Exercise Compreenda o c\u00f3digo app.py e monte o circuito adequado para conseguir visualizar o led acender e apagar. Exercise Altere o c\u00f3digo app.py e adicione mais 2 led e 2 bot\u00f5es (totalizando 3 leds, 2 bot\u00f5es), lembre-se de adaptar os arquivos HTML para exibir no frontend os status. Exercise Aproveite os seus conhecimentos web e proponha melhorias de UI/UX para o exercicio anterior.","title":"Index"},{"location":"aulas/lab3/#o-que-vamos-ver-neste-lab","text":"Raspberry Pi: Conhecendo os pinos Usando a biblioteca RPI.GPIO Montando um Webserver em Flask Progress Continuar...","title":"O que vamos ver neste lab?"},{"location":"aulas/lab3/#conhecendo-os-pinos-da-raspberry-pi","text":"Podemos utilizar a Raspberry Pi para conectar sensores e atuadores, de forma semelhante como foi feito utilizando o Arduino, para isso utilizamos os barramento de pinos da Raspberry Pi chamado de GPIO (General Purpose Input Output). Ao todo s\u00e3o 40 pinos (para RPI 2 ou superior) e de forma geral cada pino possui uma fun\u00e7\u00e3o ou caracteristica especifica. Warning Cuidado: Devemos ter aten\u00e7\u00e3o para n\u00e3o conectar os perifericos na placa de forma incorreta. Existe risco de queimar a Raspberry Pi. A imagem abaixo \u00e9 um guia simples para cada pino. Parece complicado na primeira vez, mas \u00e9 tranquilo. Vamos conhecer o que \u00e9 cada pino: - Pinos de Alimenta\u00e7\u00e3o: - 3.3V (ao todo 2 pinos) - 5V (ao todo 2 pinos) - GND/Ground/0V (ao todo 8 pinos) - Pinos de interface: - GPIO (General purpose input and output): S\u00e3o os pinos de entrada/saida. A tens\u00e3o de saida \u00e9 de 3.3V. - I2C/SPI/UART: Protocolos de comunica\u00e7\u00e3o especificos utilizados para realizar a interface m\u00f3dulos epecificos com a Raspberry Pi. Warning Aten\u00e7\u00e3o: Observe a correla\u00e7\u00e3o dos pinos para n\u00e3o ligar invertido. Exercise Quantos pinos GPIO est\u00e3o disponiveis? Progress Continuar...","title":"Conhecendo os pinos da Raspberry Pi"},{"location":"aulas/lab3/#configurando-os-gpios","text":"No final do lab07 montamos um simples pisca led e programamos configurando os valores dos registradores. Existem formas mais simples de programar os GPIOs da rasbperry pi, vamos programar em Python :) Vamos utilizara biblioteca RPI.GPIO , que permite de forma simples configurar e usar os GPIOs com script em Python, vamos preparar o nosso ambiente de desenvolvimento: Exercise Inicialize a Raspberry Pi. (modo Desktop ou SSH). Se tiver d\u00favida de como fazer, volte para o lab07. Abra o terminal da raspberry pi. Certifique-se de estar com acesso a internet. No terminal da raspberry pi, atualize os reposit\u00f3rios: sudo apt update Em seguida, tente instalar o pacote RPi.GPIO: A documenta\u00e7\u00e3o da biblioteca est\u00e1 disponivel no aqui . sudo apt install rpi.gpio Se ainda n\u00e3o estiver instalado, ser\u00e1 instalado. Se j\u00e1 estiver instalado, ser\u00e1 atualizado se uma vers\u00e3o mais recente estiver dispon\u00edvel. Progress Continuar...","title":"Configurando os GPIOs"},{"location":"aulas/lab3/#conhecendo-a-biblioteca-rpigpio","text":"\u00c9 uma biblioteca simples de usar e vamos ver as principais fun\u00e7\u00f5es da RPi.GPIO atrav\u00e9s do c\u00f3digo de exemplo abaixo: GPIO.setmode() = Define o modo de acesso aos pino da raspberry pi, existem 2 modos de definir a mesma coisa: GPIO.BOARD = Posi\u00e7\u00e3o f\u00edsica do pino na raspberry pi GPIO.BCM = Numero ap\u00f3s GPIOxx exemplo: BOARD 11 = GPIO17 GPIO.setup() = Define a fun\u00e7\u00e3o do pino, entrada (GPIO.IN) ou saida (GPIO.OUT) GPIO.output() = Define o estado do pino definido como saida em nivel logico baixo (GPIO.LOW) ou alto (GPIO.HIGH) GPIO.input() = Faz a leitura do estado do pino definido como entrada. Geralmente quando usamos um pino como entrada configuramos no setup o parametro pull_up_down (como exemplo: GPIO.setup(18, GPIO.IN, pull_up_down=GPIO.PUD_UP)) Exercise Monte o circuito abaixo: No terminal da RPI, digite: cd ~ mkdir src cd src touch blinkled.py Criamos um diretorio chamado src e um arquivo python chamado blinkled.py Abra o arquivo blinkled.py e escreva o c\u00f3digo abaixo. Para abrir o arquivo digite: nano blinkled.py Ap\u00f3s digitar o c\u00f3digo python, salve e feche o arquivo: Ctlr+X >>> Y Vamos rodar nosso c\u00f3digo python, no terminal digite: python blinkled.py Se tudo deu certo, o led est\u00e1 piscando. :) para interromper o c\u00f3digo aperte Ctrl+C. Warning Os 2 c\u00f3digos realizam a mesma fun\u00e7\u00e3o, a diferen\u00e7a est\u00e1 apenas no setmode . Escolha um dos c\u00f3digos para testar. import RPi.GPIO as GPIO ### import da biblioteca gpio import time # usando o a posi\u00e7\u00e3o fis\u00edca do pino na raspberry pi GPIO . setmode ( GPIO . BOARD ) # configura o pino fisico 11 como saida GPIO . setup ( 11 , GPIO . OUT ) whille True : # escreve no pino 11 nivel logico alto GPIO . output ( 11 , GPIO . HIGH ) time . sleep ( 1 ) # delay de 1s # escreve no pino 11 nivel logico baixo GPIO . output ( 11 , GPIO . LOW ) time . sleep ( 1 ) # delay de 1s GPIO . cleanup () # Limpa configura\u00e7\u00e3o finaliza o programa import RPi.GPIO as GPIO ### import da biblioteca gpio # usando o numero ap\u00f3s GPIOxx da raspberry pi GPIO . setmode ( GPIO . BCM ) # configura o GPIO17 como saida GPIO . setup ( 17 , GPIO . OUT ) whille True : # escreve no GPIO17 nivel logico alto GPIO . output ( 17 , GPIO . HIGH ) time . sleep ( 1 ) # delay de 1s # escreve no GPIO17 nivel logico baixo GPIO . output ( 17 , GPIO . LOW ) time . sleep ( 1 ) # delay de 1s GPIO . cleanup () # Limpa configura\u00e7\u00e3o finaliza o programa Agora que j\u00e1 entendemos a estrutura b\u00e1sica do script python, fa\u00e7a os exercicios abaixo para praticar Exercise Sem\u00e1faro de transito: - Monte um circuito com 3 leds (1 verde, 1 amarelo, 1 vermelho); - crie um novo script chamado semaforo.py; - Escreva um c\u00f3digo que ir\u00e1 acender os leds na sequ\u00eancia e intervalo: - Verde (5segundos) - Amarelo (3segundos) - Vermelho (6segundos) - loop (volta para o verde) Exercise leitura de bot\u00e3o e Led: Monte o circuito: Escreva um c\u00f3digo que: Enquanto nenhum bot\u00e3o for pressionado, os leds ficam apagados; Se o bot\u00e3o1 for pressionado: os leds acendem na sequ\u00eancia: Verde - Amarelo - Vermelho Se o bot\u00e3o2 for pressionado: os leds acendem na sequencia: Vermelho - Amarelo - Verde Dica: Geralmente quando usamos algum pino como entrada configuramos no setup o parametro pull_up_down (como exemplo: GPIO.setup(18, GPIO.IN, pull_up_down=GPIO.PUD_UP) ou GPIO.setup(18, GPIO.IN, pull_up_down=GPIO.PUD_DOWN). Exercise Sensor de temperatura: Para quem tiver curiosidade pode dar uma olhada como utilizar o sensor de temperatura DTH11 neste link . Progress Continuar...","title":"Conhecendo a biblioteca RPi.GPIO"},{"location":"aulas/lab3/#montando-um-webserver-em-flask","text":"Vamos montar um webserver na raspberry pi com flask. A ideia deste exemplo \u00e9 controlar por um navegador web o status de um led entre ligado e desligado:","title":"Montando um Webserver em Flask"},{"location":"aulas/lab3/#instalando-o-flask-e-configurando-o-ambiente","text":"No terminal da raspberry pi, atualize os reposit\u00f3rios: sudo apt update Instale os pacotes do flask sudo apt-get install python3-flask Agora vamos criar nossa arvore de projeto: - webserver - static - index.css - templates - index.html - app.py No terminal da raspberry pi, digite: cd ~ mkdir webserver cd webserver mkdir static templates ls Vamos criar o app.py . No terminal da raspberry pi, digite: nano app.py Com o editor nano aberto digite: ''' Arnaldo Viana ''' import RPi.GPIO as GPIO from flask import Flask , render_template , request app = Flask ( __name__ ) GPIO . setmode ( GPIO . BCM ) GPIO . setwarnings ( False ) #define actuators GPIOs ledRed = 2 #initialize GPIO status variables ledRedSts = 0 # Define led pins as output GPIO . setup ( ledRed , GPIO . OUT ) # turn leds OFF GPIO . output ( ledRed , GPIO . LOW ) @app . route ( \"/\" ) def index (): # Read GPIO Status ledRedSts = GPIO . input ( ledRed ) templateData = { 'ledRed' : ledRedSts , } return render_template ( 'index.html' , ** templateData ) @app . route ( \"/<deviceName>/<action>\" ) def action ( deviceName , action ): if deviceName == 'ledRed' : actuator = ledRed if action == \"on\" : GPIO . output ( actuator , GPIO . HIGH ) if action == \"off\" : GPIO . output ( actuator , GPIO . LOW ) ledRedSts = GPIO . input ( ledRed ) templateData = { 'ledRed' : ledRedSts , } return render_template ( 'index.html' , ** templateData ) if __name__ == \"__main__\" : app . run ( host = '0.0.0.0' , port = 80 , debug = True ) show! Salve e feche o editor nano. Ctrl+X >> Y Vamos criar a pagina html index.html . No terminal da raspberry pi, digite: cd templates nano index.html Com o editor nano aberto digite: <!DOCTYPE html> < head > < title > Webserver </ title > < link rel = \"stylesheet\" href = '../static/index.css' /> </ head > < body > < h2 > Controle LED </ h2 > < h3 > RED LED ==> {{ ledRed }} ==> {% if ledRed == 1 %} < a href = \"/ledRed/off\" class = \"button\" > TURN OFF </ a > {% else %} < a href = \"/ledRed/on\" class = \"button\" > TURN ON </ a > {% endif %} </ h3 > </ body > </ html > show! Salve e feche o editor nano. Ctrl+X >> Y Vamos criar o arquivo de estilo css index.css . No terminal da raspberry pi, digite: cd .. cd static nano index.html Com o editor nano aberto digite: body { background : blue ; color : yellow ; } . button { font : bold 15 px Arial ; text-decoration : none ; background-color : #EEEEEE ; color : #333333 ; padding : 2 px 6 px 2 px 6 px ; border-collapse : separete ; border-spacing : 0 ; border-top : 1 px solid #CCCCCC ; border-right : 1 px solid #333333 ; border-bottom : 1 px solid #333333 ; border-left : 1 px solid #CCCCCC ; } show! Salve e feche o editor nano. Ctrl+X >> Y","title":"Instalando o Flask e configurando o ambiente"},{"location":"aulas/lab3/#hora-de-testar","text":"Vamos testar nosso webserver simples. No terminal da raspberry pi, digite: cd .. sudo python app.py Deixe o flask rodando na raspberry e no computador ou no smartphone (Deve estar na mesma rede da raspberry), abra o navegador web e digite o ip da raspberry pi. O resultado esperado \u00e9 abrir uma pagina web e controlar o led. Exercise Compreenda o c\u00f3digo app.py e monte o circuito adequado para conseguir visualizar o led acender e apagar. Exercise Altere o c\u00f3digo app.py e adicione mais 2 led e 2 bot\u00f5es (totalizando 3 leds, 2 bot\u00f5es), lembre-se de adaptar os arquivos HTML para exibir no frontend os status. Exercise Aproveite os seus conhecimentos web e proponha melhorias de UI/UX para o exercicio anterior.","title":"Hora de testar"},{"location":"programacao/agenda/","text":"Agenda \u00b6 Hora Atividade 08:00 Abertura: apresenta\u00e7\u00e3o do dia 08:30 conceitos r\u00e1pidos sobre drone e seguran\u00e7a 09:00 Validando o setup (PC + SSD) 09:30 Entendo o c\u00f3digo... 10:00 Pratica1: Voando com teleop + 1 c\u00f3digo de exemplo 10:30 Desafio1 - odometria e IMU 11:00 Pratica2: 1 c\u00f3digo de exemplo 11:30 Desafio1 - Vis\u00e3o computacional 12:00 Encerramento","title":"Agenda"},{"location":"programacao/agenda/#agenda","text":"Hora Atividade 08:00 Abertura: apresenta\u00e7\u00e3o do dia 08:30 conceitos r\u00e1pidos sobre drone e seguran\u00e7a 09:00 Validando o setup (PC + SSD) 09:30 Entendo o c\u00f3digo... 10:00 Pratica1: Voando com teleop + 1 c\u00f3digo de exemplo 10:30 Desafio1 - odometria e IMU 11:00 Pratica2: 1 c\u00f3digo de exemplo 11:30 Desafio1 - Vis\u00e3o computacional 12:00 Encerramento","title":"Agenda"}]}